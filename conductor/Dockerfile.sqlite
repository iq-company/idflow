ARG IMAGE_BUILDER_SQLITE=builder-sqlite:latest
ARG IMAGE_BUILDER_UI=builder-ui:latest

FROM ${IMAGE_BUILDER_SQLITE} AS builder
FROM ${IMAGE_BUILDER_UI} AS builder-ui

# ===========================================================================================================
# 2. Bin stage
# ===========================================================================================================
FROM alpine:3.19

LABEL maintainer="service@get-iq.com"

RUN apk add openjdk17
RUN apk add nginx
RUN apk add curl

# Make app folders
RUN mkdir -p /app/config /app/logs /app/libs /app/sqlite/

# Copy the compiled output to new image
COPY ./config /app/config

ENV CONFIG_PROP=config-sqlite.properties

COPY --from=builder /src/conductor/docker/server/bin /app
COPY --from=builder /src/conductor/server/build/libs/*boot*.jar /app/libs/conductor-server.jar

# Copy compiled UI assets to nginx www directory
WORKDIR /usr/share/nginx/html
RUN rm -rf ./*
COPY --from=builder-ui /conductor/ui/build .
COPY --from=builder-ui /conductor/docker/server/nginx/nginx.conf /etc/nginx/http.d/default.conf

# Copy the files for the server into the app folders
RUN chmod +x /app/startup.sh

HEALTHCHECK --interval=60s --timeout=30s --retries=10 CMD curl -I -XGET http://localhost:8080/health || exit 1

CMD [ "/app/startup.sh" ]
ENTRYPOINT [ "/bin/sh"]

# docker run -d \
#   --name cond-sqlite \
#   -p 8080:8080 \
#   -p 8127:5000 \
#   cond-sqlite
